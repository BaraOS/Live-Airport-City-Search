"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _https = _interopRequireDefault(require("https"));

var _http = _interopRequireDefault(require("http"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HOSTS = {
  'test': 'test.api.amadeus.com',
  'production': 'api.amadeus.com'
};
var RECOGNIZED_OPTIONS = ['clientId', 'clientSecret', 'logger', 'logLevel', 'hostname', 'host', 'customAppId', 'customAppVersion', 'http', 'ssl', 'port'];
/**
 * Helper class for validating parameters
 * @protected
 */

var Validator =
/*#__PURE__*/
function () {
  function Validator() {
    _classCallCheck(this, Validator);
  }

  _createClass(Validator, [{
    key: "validateAndInitialize",

    /**
     * Initialise the client's default value, ensuring the required values are
     * present
     *
     * @param  {Client} client the client object to set the defaults for
     * @param  {Object} options the associative array of options passed to the
     *  client on initialization
     */
    value: function validateAndInitialize(client, options) {
      this.initializeClientCredentials(client, options);
      this.initializeLogger(client, options);
      this.initializeHost(client, options);
      this.initializeCustomApp(client, options);
      this.initializeHttp(client, options);
      this.warnOnUnrecognizedOptions(options, client, RECOGNIZED_OPTIONS);
    } // PRIVATE

  }, {
    key: "initializeClientCredentials",
    value: function initializeClientCredentials(client, options) {
      client.clientId = this.initRequired('clientId', options);
      client.clientSecret = this.initRequired('clientSecret', options);
    }
  }, {
    key: "initializeLogger",
    value: function initializeLogger(client, options) {
      client.logger = this.initOptional('logger', options, console);
      client.logLevel = this.initOptional('logLevel', options, 'silent');
    }
  }, {
    key: "initializeHost",
    value: function initializeHost(client, options) {
      var hostname = this.initOptional('hostname', options, 'test');
      client.host = this.initOptional('host', options, HOSTS[hostname]);
      client.port = this.initOptional('port', options, 443);
      client.ssl = this.initOptional('ssl', options, true);
    }
  }, {
    key: "initializeCustomApp",
    value: function initializeCustomApp(client, options) {
      client.customAppId = this.initOptional('customAppId', options);
      client.customAppVersion = this.initOptional('customAppVersion', options);
    }
  }, {
    key: "initializeHttp",
    value: function initializeHttp(client, options) {
      var network = client.ssl ? _https["default"] : _http["default"];
      client.http = this.initOptional('http', options, network);
    }
  }, {
    key: "initRequired",
    value: function initRequired(key, options) {
      var result = this.initOptional(key, options);
      if (!result) throw new ArgumentError("Missing required argument: ".concat(key));
      return result;
    }
  }, {
    key: "initOptional",
    value: function initOptional(key, options) {
      var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var value = options[key];
      var envKey = "AMADEUS_".concat(key.toUpperCase());

      if (value == undefined) {
        value = options[key];
      }

      if (value == undefined) {
        value = process.env[envKey];
      }

      if (value == undefined) {
        value = fallback;
      }

      return value;
    }
  }, {
    key: "warnOnUnrecognizedOptions",
    value: function warnOnUnrecognizedOptions(options, client, recognizedOptions) {
      Object.keys(options).forEach(function (key) {
        if (recognizedOptions.indexOf(key) === -1 && client.warn()) {
          client.logger.log("Unrecognized option: ".concat(key));
        }
      });
      return null;
    }
  }]);

  return Validator;
}(); // PRIVATE


var ArgumentError =
/*#__PURE__*/
function (_Error) {
  _inherits(ArgumentError, _Error);

  function ArgumentError(message) {
    var _this;

    _classCallCheck(this, ArgumentError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArgumentError).call(this, message));
    _this.name = 'ArgumentError';
    return _this;
  }

  return ArgumentError;
}(_wrapNativeSuper(Error));

var _default = Validator;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,