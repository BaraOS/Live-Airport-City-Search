"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _qs = _interopRequireDefault(require("qs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A Request object containing all the compiled information about this request.
 *
 * @property {string} host the host used for this API call
 * @property {number} port the port for this API call. Standard set to 443.
 * @property {boolean} ssl wether this API call uses SSL
 * @property {string} scheme the scheme inferred from the SSL state
 * @property {string} verb the HTTP method, for example `GET` or `POST`
 * @property {string} path the full path of the API endpoint
 * @property {Object} params the parameters to pass in the query or body
 * @property {string} queryPath the path and query string used for the API call
 * @property {string} bearerToken the authentication token
 * @property {string} clientVersion the version of the Amadeus library
 * @property {string} languageVersion the version of Node used
 * @property {string} appId the custom ID of the application using this library
 * @property {string} appVersion the custom version of the application
 *  using this library
 * @property {Object} headers the request headers
 *
 * @param {Object} options
 */
var Request =
/*#__PURE__*/
function () {
  function Request(options) {
    _classCallCheck(this, Request);

    this.host = options.host;
    this.port = options.port;
    this.ssl = options.ssl;
    this.scheme = this.ssl ? 'https' : 'http';
    this.verb = options.verb;
    this.path = options.path;
    this.params = options.params;
    this.queryPath = this.fullQueryPath();
    this.bearerToken = options.bearerToken;
    this.clientVersion = options.clientVersion;
    this.languageVersion = options.languageVersion.replace('v', '');
    this.appId = options.appId;
    this.appVersion = options.appVersion;
    this.headers = {
      'User-Agent': this.userAgent(),
      'Accept': 'application/json, application/vnd.amadeus+json'
    };
    this.addAuthorizationHeader();
    this.addContentTypeHeader();
  } // PROTECTED

  /**
   * Compiles the options for the HTTP request.
   *
   * Used by Client.execute when executing this request against the server.
   *
   * @return {Object} an associative array of options to be passed into the
   *  Client.execute function
   * @protected
   */


  _createClass(Request, [{
    key: "options",
    value: function options() {
      var options = {
        'host': this.host,
        'port': this.port,
        'protocol': "".concat(this.scheme, ":"),
        'path': this.queryPath,
        'method': this.verb,
        'headers': this.headers
      };
      return options;
    }
    /**
     * Creats the body for the API cal, serializing the params if the verb is POST.
     *
     * @return {string} the serialized params
     * @protected
     */

  }, {
    key: "body",
    value: function body() {
      if (this.verb !== 'POST') {
        return '';
      } else {
        if (!this.bearerToken) {
          return _qs["default"].stringify(this.params);
        }

        return this.params;
      }
    } // PRIVATE

    /**
     * Build up the custom User Agent
     *
     * @return {string} a user agent in the format "library/version language/version app/version"
     * @private
     */

  }, {
    key: "userAgent",
    value: function userAgent() {
      var userAgent = "amadeus-node/".concat(this.clientVersion, " node/").concat(this.languageVersion);

      if (!this.appId) {
        return userAgent;
      }

      return "".concat(userAgent, " ").concat(this.appId, "/").concat(this.appVersion);
    }
    /**
     * Build the full query path, combining the path with the query params if the
     * verb is 'GET'. For example: '/foo/bar?baz=qux'
     *
     * @return {string} the path and params combined into one string.
     * @private
     */

  }, {
    key: "fullQueryPath",
    value: function fullQueryPath() {
      if (this.verb === 'POST') {
        return this.path;
      } else {
        return "".concat(this.path, "?").concat(_qs["default"].stringify(this.params));
      }
    }
    /**
     * Adds an Authorization header if the BearerToken is present
     *
     * @private
     */

  }, {
    key: "addAuthorizationHeader",
    value: function addAuthorizationHeader() {
      if (!this.bearerToken) {
        return;
      }

      this.headers['Authorization'] = "Bearer ".concat(this.bearerToken);
    }
    /**
     * Adds an Content-Type header if the HTTP method equals POST
     *
     * @private
     */

  }, {
    key: "addContentTypeHeader",
    value: function addContentTypeHeader() {
      if (this.verb === 'POST' && !this.bearerToken) {
        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';
      } else {
        this.headers['Content-Type'] = 'application/vnd.amadeus+json';
      }

      return;
    }
  }]);

  return Request;
}();

var _default = Request;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9yZXF1ZXN0LmpzIl0sIm5hbWVzIjpbIlJlcXVlc3QiLCJvcHRpb25zIiwiaG9zdCIsInBvcnQiLCJzc2wiLCJzY2hlbWUiLCJ2ZXJiIiwicGF0aCIsInBhcmFtcyIsInF1ZXJ5UGF0aCIsImZ1bGxRdWVyeVBhdGgiLCJiZWFyZXJUb2tlbiIsImNsaWVudFZlcnNpb24iLCJsYW5ndWFnZVZlcnNpb24iLCJyZXBsYWNlIiwiYXBwSWQiLCJhcHBWZXJzaW9uIiwiaGVhZGVycyIsInVzZXJBZ2VudCIsImFkZEF1dGhvcml6YXRpb25IZWFkZXIiLCJhZGRDb250ZW50VHlwZUhlYWRlciIsInFzIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBcUJNQSxPOzs7QUFDSixtQkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUNuQixTQUFLQyxJQUFMLEdBQXVCRCxPQUFPLENBQUNDLElBQS9CO0FBQ0EsU0FBS0MsSUFBTCxHQUF1QkYsT0FBTyxDQUFDRSxJQUEvQjtBQUNBLFNBQUtDLEdBQUwsR0FBdUJILE9BQU8sQ0FBQ0csR0FBL0I7QUFDQSxTQUFLQyxNQUFMLEdBQXVCLEtBQUtELEdBQUwsR0FBVyxPQUFYLEdBQXFCLE1BQTVDO0FBQ0EsU0FBS0UsSUFBTCxHQUF1QkwsT0FBTyxDQUFDSyxJQUEvQjtBQUNBLFNBQUtDLElBQUwsR0FBdUJOLE9BQU8sQ0FBQ00sSUFBL0I7QUFDQSxTQUFLQyxNQUFMLEdBQXVCUCxPQUFPLENBQUNPLE1BQS9CO0FBQ0EsU0FBS0MsU0FBTCxHQUF1QixLQUFLQyxhQUFMLEVBQXZCO0FBQ0EsU0FBS0MsV0FBTCxHQUF1QlYsT0FBTyxDQUFDVSxXQUEvQjtBQUNBLFNBQUtDLGFBQUwsR0FBdUJYLE9BQU8sQ0FBQ1csYUFBL0I7QUFDQSxTQUFLQyxlQUFMLEdBQXVCWixPQUFPLENBQUNZLGVBQVIsQ0FBd0JDLE9BQXhCLENBQWdDLEdBQWhDLEVBQXFDLEVBQXJDLENBQXZCO0FBQ0EsU0FBS0MsS0FBTCxHQUF1QmQsT0FBTyxDQUFDYyxLQUEvQjtBQUNBLFNBQUtDLFVBQUwsR0FBdUJmLE9BQU8sQ0FBQ2UsVUFBL0I7QUFDQSxTQUFLQyxPQUFMLEdBQXVCO0FBQ3JCLG9CQUFlLEtBQUtDLFNBQUwsRUFETTtBQUVyQixnQkFBVztBQUZVLEtBQXZCO0FBSUEsU0FBS0Msc0JBQUw7QUFDQSxTQUFLQyxvQkFBTDtBQUNELEcsQ0FFRDs7QUFFQTs7Ozs7Ozs7Ozs7Ozs4QkFTVTtBQUNSLFVBQUluQixPQUFPLEdBQUc7QUFDWixnQkFBUyxLQUFLQyxJQURGO0FBRVosZ0JBQVMsS0FBS0MsSUFGRjtBQUdaLDhCQUFnQixLQUFLRSxNQUFyQixNQUhZO0FBSVosZ0JBQVMsS0FBS0ksU0FKRjtBQUtaLGtCQUFXLEtBQUtILElBTEo7QUFNWixtQkFBWSxLQUFLVztBQU5MLE9BQWQ7QUFRQSxhQUFPaEIsT0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7OzsyQkFNTztBQUNMLFVBQUksS0FBS0ssSUFBTCxLQUFjLE1BQWxCLEVBQTBCO0FBQUUsZUFBTyxFQUFQO0FBQVksT0FBeEMsTUFDSztBQUNILFlBQUksQ0FBQyxLQUFLSyxXQUFWLEVBQXVCO0FBQ3JCLGlCQUFPVSxlQUFHQyxTQUFILENBQWEsS0FBS2QsTUFBbEIsQ0FBUDtBQUNEOztBQUNELGVBQU8sS0FBS0EsTUFBWjtBQUNEO0FBQ0YsSyxDQUVEOztBQUVBOzs7Ozs7Ozs7Z0NBTVk7QUFDVixVQUFJVSxTQUFTLDBCQUFtQixLQUFLTixhQUF4QixtQkFBOEMsS0FBS0MsZUFBbkQsQ0FBYjs7QUFDQSxVQUFJLENBQUMsS0FBS0UsS0FBVixFQUFpQjtBQUFFLGVBQU9HLFNBQVA7QUFBbUI7O0FBQ3RDLHVCQUFVQSxTQUFWLGNBQXVCLEtBQUtILEtBQTVCLGNBQXFDLEtBQUtDLFVBQTFDO0FBQ0Q7QUFFRDs7Ozs7Ozs7OztvQ0FPZ0I7QUFDZCxVQUFJLEtBQUtWLElBQUwsS0FBYyxNQUFsQixFQUEwQjtBQUFFLGVBQU8sS0FBS0MsSUFBWjtBQUFtQixPQUEvQyxNQUNLO0FBQUUseUJBQVUsS0FBS0EsSUFBZixjQUF1QmMsZUFBR0MsU0FBSCxDQUFhLEtBQUtkLE1BQWxCLENBQXZCO0FBQXFEO0FBQzdEO0FBRUQ7Ozs7Ozs7OzZDQUt5QjtBQUN2QixVQUFJLENBQUMsS0FBS0csV0FBVixFQUF1QjtBQUFFO0FBQVM7O0FBQ2xDLFdBQUtNLE9BQUwsQ0FBYSxlQUFiLHFCQUEwQyxLQUFLTixXQUEvQztBQUNEO0FBRUQ7Ozs7Ozs7OzJDQUt1QjtBQUNyQixVQUFJLEtBQUtMLElBQUwsS0FBYyxNQUFkLElBQXdCLENBQUMsS0FBS0ssV0FBbEMsRUFBK0M7QUFDN0MsYUFBS00sT0FBTCxDQUFhLGNBQWIsSUFBK0IsbUNBQS9CO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS0EsT0FBTCxDQUFhLGNBQWIsSUFBK0IsOEJBQS9CO0FBQ0Q7O0FBQ0Q7QUFDRDs7Ozs7O2VBR1lqQixPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHFzIGZyb20gJ3FzJztcblxuLyoqXG4gKiBBIFJlcXVlc3Qgb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBjb21waWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGlzIHJlcXVlc3QuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhvc3QgdGhlIGhvc3QgdXNlZCBmb3IgdGhpcyBBUEkgY2FsbFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHBvcnQgdGhlIHBvcnQgZm9yIHRoaXMgQVBJIGNhbGwuIFN0YW5kYXJkIHNldCB0byA0NDMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHNzbCB3ZXRoZXIgdGhpcyBBUEkgY2FsbCB1c2VzIFNTTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNjaGVtZSB0aGUgc2NoZW1lIGluZmVycmVkIGZyb20gdGhlIFNTTCBzdGF0ZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHZlcmIgdGhlIEhUVFAgbWV0aG9kLCBmb3IgZXhhbXBsZSBgR0VUYCBvciBgUE9TVGBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRoIHRoZSBmdWxsIHBhdGggb2YgdGhlIEFQSSBlbmRwb2ludFxuICogQHByb3BlcnR5IHtPYmplY3R9IHBhcmFtcyB0aGUgcGFyYW1ldGVycyB0byBwYXNzIGluIHRoZSBxdWVyeSBvciBib2R5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcXVlcnlQYXRoIHRoZSBwYXRoIGFuZCBxdWVyeSBzdHJpbmcgdXNlZCBmb3IgdGhlIEFQSSBjYWxsXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYmVhcmVyVG9rZW4gdGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2xpZW50VmVyc2lvbiB0aGUgdmVyc2lvbiBvZiB0aGUgQW1hZGV1cyBsaWJyYXJ5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gbGFuZ3VhZ2VWZXJzaW9uIHRoZSB2ZXJzaW9uIG9mIE5vZGUgdXNlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFwcElkIHRoZSBjdXN0b20gSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHVzaW5nIHRoaXMgbGlicmFyeVxuICogQHByb3BlcnR5IHtzdHJpbmd9IGFwcFZlcnNpb24gdGhlIGN1c3RvbSB2ZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvblxuICogIHVzaW5nIHRoaXMgbGlicmFyeVxuICogQHByb3BlcnR5IHtPYmplY3R9IGhlYWRlcnMgdGhlIHJlcXVlc3QgaGVhZGVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmNsYXNzIFJlcXVlc3Qge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5ob3N0ICAgICAgICAgICAgPSBvcHRpb25zLmhvc3Q7XG4gICAgdGhpcy5wb3J0ICAgICAgICAgICAgPSBvcHRpb25zLnBvcnQ7XG4gICAgdGhpcy5zc2wgICAgICAgICAgICAgPSBvcHRpb25zLnNzbDtcbiAgICB0aGlzLnNjaGVtZSAgICAgICAgICA9IHRoaXMuc3NsID8gJ2h0dHBzJyA6ICdodHRwJztcbiAgICB0aGlzLnZlcmIgICAgICAgICAgICA9IG9wdGlvbnMudmVyYjtcbiAgICB0aGlzLnBhdGggICAgICAgICAgICA9IG9wdGlvbnMucGF0aDtcbiAgICB0aGlzLnBhcmFtcyAgICAgICAgICA9IG9wdGlvbnMucGFyYW1zO1xuICAgIHRoaXMucXVlcnlQYXRoICAgICAgID0gdGhpcy5mdWxsUXVlcnlQYXRoKCk7XG4gICAgdGhpcy5iZWFyZXJUb2tlbiAgICAgPSBvcHRpb25zLmJlYXJlclRva2VuO1xuICAgIHRoaXMuY2xpZW50VmVyc2lvbiAgID0gb3B0aW9ucy5jbGllbnRWZXJzaW9uO1xuICAgIHRoaXMubGFuZ3VhZ2VWZXJzaW9uID0gb3B0aW9ucy5sYW5ndWFnZVZlcnNpb24ucmVwbGFjZSgndicsICcnKTtcbiAgICB0aGlzLmFwcElkICAgICAgICAgICA9IG9wdGlvbnMuYXBwSWQ7XG4gICAgdGhpcy5hcHBWZXJzaW9uICAgICAgPSBvcHRpb25zLmFwcFZlcnNpb247XG4gICAgdGhpcy5oZWFkZXJzICAgICAgICAgPSB7XG4gICAgICAnVXNlci1BZ2VudCcgOiB0aGlzLnVzZXJBZ2VudCgpLFxuICAgICAgJ0FjY2VwdCcgOiAnYXBwbGljYXRpb24vanNvbiwgYXBwbGljYXRpb24vdm5kLmFtYWRldXMranNvbidcbiAgICB9O1xuICAgIHRoaXMuYWRkQXV0aG9yaXphdGlvbkhlYWRlcigpO1xuICAgIHRoaXMuYWRkQ29udGVudFR5cGVIZWFkZXIoKTtcbiAgfVxuXG4gIC8vIFBST1RFQ1RFRFxuXG4gIC8qKlxuICAgKiBDb21waWxlcyB0aGUgb3B0aW9ucyBmb3IgdGhlIEhUVFAgcmVxdWVzdC5cbiAgICpcbiAgICogVXNlZCBieSBDbGllbnQuZXhlY3V0ZSB3aGVuIGV4ZWN1dGluZyB0aGlzIHJlcXVlc3QgYWdhaW5zdCB0aGUgc2VydmVyLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGFuIGFzc29jaWF0aXZlIGFycmF5IG9mIG9wdGlvbnMgdG8gYmUgcGFzc2VkIGludG8gdGhlXG4gICAqICBDbGllbnQuZXhlY3V0ZSBmdW5jdGlvblxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBvcHRpb25zKCkge1xuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgJ2hvc3QnIDogdGhpcy5ob3N0LFxuICAgICAgJ3BvcnQnIDogdGhpcy5wb3J0LFxuICAgICAgJ3Byb3RvY29sJyA6IGAke3RoaXMuc2NoZW1lfTpgLFxuICAgICAgJ3BhdGgnIDogdGhpcy5xdWVyeVBhdGgsXG4gICAgICAnbWV0aG9kJyA6IHRoaXMudmVyYixcbiAgICAgICdoZWFkZXJzJyA6IHRoaXMuaGVhZGVyc1xuICAgIH07XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRzIHRoZSBib2R5IGZvciB0aGUgQVBJIGNhbCwgc2VyaWFsaXppbmcgdGhlIHBhcmFtcyBpZiB0aGUgdmVyYiBpcyBQT1NULlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBzZXJpYWxpemVkIHBhcmFtc1xuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBib2R5KCkge1xuICAgIGlmICh0aGlzLnZlcmIgIT09ICdQT1NUJykgeyByZXR1cm4gJyc7IH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5iZWFyZXJUb2tlbikge1xuICAgICAgICByZXR1cm4gcXMuc3RyaW5naWZ5KHRoaXMucGFyYW1zKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnBhcmFtcztcbiAgICB9XG4gIH1cblxuICAvLyBQUklWQVRFXG5cbiAgLyoqXG4gICAqIEJ1aWxkIHVwIHRoZSBjdXN0b20gVXNlciBBZ2VudFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGEgdXNlciBhZ2VudCBpbiB0aGUgZm9ybWF0IFwibGlicmFyeS92ZXJzaW9uIGxhbmd1YWdlL3ZlcnNpb24gYXBwL3ZlcnNpb25cIlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdXNlckFnZW50KCkge1xuICAgIGxldCB1c2VyQWdlbnQgPSBgYW1hZGV1cy1ub2RlLyR7dGhpcy5jbGllbnRWZXJzaW9ufSBub2RlLyR7dGhpcy5sYW5ndWFnZVZlcnNpb259YDtcbiAgICBpZiAoIXRoaXMuYXBwSWQpIHsgcmV0dXJuIHVzZXJBZ2VudDsgfVxuICAgIHJldHVybiBgJHt1c2VyQWdlbnR9ICR7dGhpcy5hcHBJZH0vJHt0aGlzLmFwcFZlcnNpb259YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgZnVsbCBxdWVyeSBwYXRoLCBjb21iaW5pbmcgdGhlIHBhdGggd2l0aCB0aGUgcXVlcnkgcGFyYW1zIGlmIHRoZVxuICAgKiB2ZXJiIGlzICdHRVQnLiBGb3IgZXhhbXBsZTogJy9mb28vYmFyP2Jhej1xdXgnXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHBhdGggYW5kIHBhcmFtcyBjb21iaW5lZCBpbnRvIG9uZSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdWxsUXVlcnlQYXRoKCkge1xuICAgIGlmICh0aGlzLnZlcmIgPT09ICdQT1NUJykgeyByZXR1cm4gdGhpcy5wYXRoOyB9XG4gICAgZWxzZSB7IHJldHVybiBgJHt0aGlzLnBhdGh9PyR7cXMuc3RyaW5naWZ5KHRoaXMucGFyYW1zKX1gOyB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBBdXRob3JpemF0aW9uIGhlYWRlciBpZiB0aGUgQmVhcmVyVG9rZW4gaXMgcHJlc2VudFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkQXV0aG9yaXphdGlvbkhlYWRlcigpIHtcbiAgICBpZiAoIXRoaXMuYmVhcmVyVG9rZW4pIHsgcmV0dXJuOyB9XG4gICAgdGhpcy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7dGhpcy5iZWFyZXJUb2tlbn1gO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gQ29udGVudC1UeXBlIGhlYWRlciBpZiB0aGUgSFRUUCBtZXRob2QgZXF1YWxzIFBPU1RcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFkZENvbnRlbnRUeXBlSGVhZGVyKCkge1xuICAgIGlmICh0aGlzLnZlcmIgPT09ICdQT1NUJyAmJiAhdGhpcy5iZWFyZXJUb2tlbikge1xuICAgICAgdGhpcy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3ZuZC5hbWFkZXVzK2pzb24nO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVxdWVzdDtcbiJdfQ==