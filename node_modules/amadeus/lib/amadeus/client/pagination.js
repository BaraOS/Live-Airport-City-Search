"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A helper library for handling pagination.
 *
 * @param {Client} client the client to make the API calls against
 * @protected
 */
var Pagination =
/*#__PURE__*/
function () {
  function Pagination(client) {
    _classCallCheck(this, Pagination);

    this.client = client;
  }
  /**
   * Fetch the page for the given page name, and make the next API call based on
   * the previous request made.
   *
   * @param  {type} pageName the name of the page to fetch, should be available
   *    as a link in the meta links in the response
   * @param  {type} response the response containing the links to the next pages,
   *   and the request used to make the previous call
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */


  _createClass(Pagination, [{
    key: "page",
    value: function page(pageName, response) {
      var pageNumber = this.pageNumber(response, pageName);

      if (pageNumber) {
        return this.call(response.request, pageNumber);
      } else {
        return this.nullPromise();
      }
    } // PRIVATE

    /**
     * Makes a new call for the new page number
     *
     * @param  {type} request    the request used to make the previous call
     * @param  {type} pageNumber the page number to fetch
     * @return {Promise.<Response,ResponseError>} a Bluebird Promise
     * @private
     */

  }, {
    key: "call",
    value: function call(request, pageNumber) {
      var params = request.params || {};
      params['page'] = params['page'] || {};
      params['page']['offset'] = pageNumber;
      return this.client.request(request.verb, request.path, params);
    }
    /**
     * Tries to determine the page number from the page name. If not present, it
     * just returns null
     *
     * @param  {type} response the response containing the links to the next pages
     * @param  {type} pageName the name of the page to fetch
     * @return {number}
     * @private
     */

  }, {
    key: "pageNumber",
    value: function pageNumber(response, pageName) {
      try {
        return response.result['meta']['links'][pageName].split('=').pop();
      } catch (TypeError) {
        return null;
      }
    }
    /**
     * Returns a Promise that always resolves to null
     *
     * @return {Promise} a Promise that always resolves to null
     * @private
     */

  }, {
    key: "nullPromise",
    value: function nullPromise() {
      return new Promise(function (resolve) {
        resolve(null);
      });
    }
  }]);

  return Pagination;
}();

var _default = Pagination;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hbWFkZXVzL2NsaWVudC9wYWdpbmF0aW9uLmpzIl0sIm5hbWVzIjpbIlBhZ2luYXRpb24iLCJjbGllbnQiLCJwYWdlTmFtZSIsInJlc3BvbnNlIiwicGFnZU51bWJlciIsImNhbGwiLCJyZXF1ZXN0IiwibnVsbFByb21pc2UiLCJwYXJhbXMiLCJ2ZXJiIiwicGF0aCIsInJlc3VsdCIsInNwbGl0IiwicG9wIiwiVHlwZUVycm9yIiwiUHJvbWlzZSIsInJlc29sdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0lBTU1BLFU7OztBQUNKLHNCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozt5QkFXS0MsUSxFQUFVQyxRLEVBQVU7QUFDdkIsVUFBSUMsVUFBVSxHQUFHLEtBQUtBLFVBQUwsQ0FBZ0JELFFBQWhCLEVBQTBCRCxRQUExQixDQUFqQjs7QUFFQSxVQUFJRSxVQUFKLEVBQWdCO0FBQ2QsZUFBTyxLQUFLQyxJQUFMLENBQVVGLFFBQVEsQ0FBQ0csT0FBbkIsRUFBNEJGLFVBQTVCLENBQVA7QUFDRCxPQUZELE1BRU87QUFDTCxlQUFPLEtBQUtHLFdBQUwsRUFBUDtBQUNEO0FBQ0YsSyxDQUVEOztBQUdBOzs7Ozs7Ozs7Ozt5QkFRS0QsTyxFQUFTRixVLEVBQVk7QUFDeEIsVUFBSUksTUFBTSxHQUFHRixPQUFPLENBQUNFLE1BQVIsSUFBa0IsRUFBL0I7QUFDQUEsTUFBQUEsTUFBTSxDQUFDLE1BQUQsQ0FBTixHQUFpQkEsTUFBTSxDQUFDLE1BQUQsQ0FBTixJQUFrQixFQUFuQztBQUNBQSxNQUFBQSxNQUFNLENBQUMsTUFBRCxDQUFOLENBQWUsUUFBZixJQUEyQkosVUFBM0I7QUFFQSxhQUFPLEtBQUtILE1BQUwsQ0FBWUssT0FBWixDQUNMQSxPQUFPLENBQUNHLElBREgsRUFFTEgsT0FBTyxDQUFDSSxJQUZILEVBR0xGLE1BSEssQ0FBUDtBQUtEO0FBRUQ7Ozs7Ozs7Ozs7OzsrQkFTV0wsUSxFQUFVRCxRLEVBQVU7QUFDN0IsVUFBSTtBQUNGLGVBQU9DLFFBQVEsQ0FBQ1EsTUFBVCxDQUFnQixNQUFoQixFQUF3QixPQUF4QixFQUFpQ1QsUUFBakMsRUFBMkNVLEtBQTNDLENBQWlELEdBQWpELEVBQXNEQyxHQUF0RCxFQUFQO0FBQ0QsT0FGRCxDQUVFLE9BQU9DLFNBQVAsRUFBa0I7QUFDbEIsZUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7Ozs7a0NBTWM7QUFDWixhQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCO0FBQUVBLFFBQUFBLE9BQU8sQ0FBQyxJQUFELENBQVA7QUFBZ0IsT0FBaEQsQ0FBUDtBQUNEOzs7Ozs7ZUFHWWhCLFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgaGVscGVyIGxpYnJhcnkgZm9yIGhhbmRsaW5nIHBhZ2luYXRpb24uXG4gKlxuICogQHBhcmFtIHtDbGllbnR9IGNsaWVudCB0aGUgY2xpZW50IHRvIG1ha2UgdGhlIEFQSSBjYWxscyBhZ2FpbnN0XG4gKiBAcHJvdGVjdGVkXG4gKi9cbmNsYXNzIFBhZ2luYXRpb24ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgcGFnZSBmb3IgdGhlIGdpdmVuIHBhZ2UgbmFtZSwgYW5kIG1ha2UgdGhlIG5leHQgQVBJIGNhbGwgYmFzZWQgb25cbiAgICogdGhlIHByZXZpb3VzIHJlcXVlc3QgbWFkZS5cbiAgICpcbiAgICogQHBhcmFtICB7dHlwZX0gcGFnZU5hbWUgdGhlIG5hbWUgb2YgdGhlIHBhZ2UgdG8gZmV0Y2gsIHNob3VsZCBiZSBhdmFpbGFibGVcbiAgICogICAgYXMgYSBsaW5rIGluIHRoZSBtZXRhIGxpbmtzIGluIHRoZSByZXNwb25zZVxuICAgKiBAcGFyYW0gIHt0eXBlfSByZXNwb25zZSB0aGUgcmVzcG9uc2UgY29udGFpbmluZyB0aGUgbGlua3MgdG8gdGhlIG5leHQgcGFnZXMsXG4gICAqICAgYW5kIHRoZSByZXF1ZXN0IHVzZWQgdG8gbWFrZSB0aGUgcHJldmlvdXMgY2FsbFxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBCbHVlYmlyZCBQcm9taXNlXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHBhZ2UocGFnZU5hbWUsIHJlc3BvbnNlKSB7XG4gICAgbGV0IHBhZ2VOdW1iZXIgPSB0aGlzLnBhZ2VOdW1iZXIocmVzcG9uc2UsIHBhZ2VOYW1lKTtcblxuICAgIGlmIChwYWdlTnVtYmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsKHJlc3BvbnNlLnJlcXVlc3QsIHBhZ2VOdW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5udWxsUHJvbWlzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBSSVZBVEVcblxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIG5ldyBjYWxsIGZvciB0aGUgbmV3IHBhZ2UgbnVtYmVyXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IHJlcXVlc3QgICAgdGhlIHJlcXVlc3QgdXNlZCB0byBtYWtlIHRoZSBwcmV2aW91cyBjYWxsXG4gICAqIEBwYXJhbSAge3R5cGV9IHBhZ2VOdW1iZXIgdGhlIHBhZ2UgbnVtYmVyIHRvIGZldGNoXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIEJsdWViaXJkIFByb21pc2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhbGwocmVxdWVzdCwgcGFnZU51bWJlcikge1xuICAgIGxldCBwYXJhbXMgPSByZXF1ZXN0LnBhcmFtcyB8fCB7fTtcbiAgICBwYXJhbXNbJ3BhZ2UnXSA9IHBhcmFtc1sncGFnZSddIHx8IHt9O1xuICAgIHBhcmFtc1sncGFnZSddWydvZmZzZXQnXSA9IHBhZ2VOdW1iZXI7XG5cbiAgICByZXR1cm4gdGhpcy5jbGllbnQucmVxdWVzdChcbiAgICAgIHJlcXVlc3QudmVyYixcbiAgICAgIHJlcXVlc3QucGF0aCxcbiAgICAgIHBhcmFtc1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBwYWdlIG51bWJlciBmcm9tIHRoZSBwYWdlIG5hbWUuIElmIG5vdCBwcmVzZW50LCBpdFxuICAgKiBqdXN0IHJldHVybnMgbnVsbFxuICAgKlxuICAgKiBAcGFyYW0gIHt0eXBlfSByZXNwb25zZSB0aGUgcmVzcG9uc2UgY29udGFpbmluZyB0aGUgbGlua3MgdG8gdGhlIG5leHQgcGFnZXNcbiAgICogQHBhcmFtICB7dHlwZX0gcGFnZU5hbWUgdGhlIG5hbWUgb2YgdGhlIHBhZ2UgdG8gZmV0Y2hcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcGFnZU51bWJlcihyZXNwb25zZSwgcGFnZU5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdFsnbWV0YSddWydsaW5rcyddW3BhZ2VOYW1lXS5zcGxpdCgnPScpLnBvcCgpO1xuICAgIH0gY2F0Y2ggKFR5cGVFcnJvcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgYWx3YXlzIHJlc29sdmVzIHRvIG51bGxcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gYSBQcm9taXNlIHRoYXQgYWx3YXlzIHJlc29sdmVzIHRvIG51bGxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG51bGxQcm9taXNlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7IHJlc29sdmUobnVsbCk7IH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2luYXRpb247XG4iXX0=