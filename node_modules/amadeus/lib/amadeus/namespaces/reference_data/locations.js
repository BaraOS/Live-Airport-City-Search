"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _airports = _interopRequireDefault(require("./locations/airports"));

var _pois = _interopRequireDefault(require("./locations/pois"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A namespaced client for the
 * `/v2/reference-data/locations` endpoints
 *
 * Access via the {@link Amadeus} object
 *
 * ```js
 * let amadeus = new Amadeus();
 * amadeus.referenceData.locations;
 * ```
 *
 * @param {Client} client
 * @property {Airports} airports
 */
var Locations =
/*#__PURE__*/
function () {
  function Locations(client) {
    _classCallCheck(this, Locations);

    this.client = client;
    this.airports = new _airports["default"](client);
    this.pointsOfInterest = new _pois["default"](client);
  }
  /**
   * Returns a list of airports and cities matching a given keyword.
   *
   * @param {Object} params
   * @param {string} params.keyword keyword that should represent the start of
   *   a word in a city or airport name or code
   * @param {string} params.subType the type of location to search for
   * @return {Promise.<Response,ResponseError>} a Promise
   *
   * Find any location starting with 'lon'
   *
   * ```js
   * amadeus.referenceData.location.get({
   *   keyword: 'lon',
   *   subType: Amadeus.location.any
   * });
   * ```
   */


  _createClass(Locations, [{
    key: "get",
    value: function get() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get('/v1/reference-data/locations', params);
    }
  }]);

  return Locations;
}();

var _default = Locations;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvcmVmZXJlbmNlX2RhdGEvbG9jYXRpb25zLmpzIl0sIm5hbWVzIjpbIkxvY2F0aW9ucyIsImNsaWVudCIsImFpcnBvcnRzIiwiQWlycG9ydHMiLCJwb2ludHNPZkludGVyZXN0IiwiUG9pbnRzT2ZJbnRlcmVzdCIsInBhcmFtcyIsImdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0lBY01BLFM7OztBQUNKLHFCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsSUFBSUMsb0JBQUosQ0FBYUYsTUFBYixDQUFoQjtBQUNBLFNBQUtHLGdCQUFMLEdBQXdCLElBQUlDLGdCQUFKLENBQXFCSixNQUFyQixDQUF4QjtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBa0JpQjtBQUFBLFVBQWJLLE1BQWEsdUVBQUosRUFBSTtBQUNmLGFBQU8sS0FBS0wsTUFBTCxDQUFZTSxHQUFaLENBQWdCLDhCQUFoQixFQUFnREQsTUFBaEQsQ0FBUDtBQUNEOzs7Ozs7ZUFHWU4sUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBaXJwb3J0cyBmcm9tICcuL2xvY2F0aW9ucy9haXJwb3J0cyc7XG5pbXBvcnQgUG9pbnRzT2ZJbnRlcmVzdCBmcm9tICcuL2xvY2F0aW9ucy9wb2lzJztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvcmVmZXJlbmNlLWRhdGEvbG9jYXRpb25zYCBlbmRwb2ludHNcbiAqXG4gKiBBY2Nlc3MgdmlhIHRoZSB7QGxpbmsgQW1hZGV1c30gb2JqZWN0XG4gKlxuICogYGBganNcbiAqIGxldCBhbWFkZXVzID0gbmV3IEFtYWRldXMoKTtcbiAqIGFtYWRldXMucmVmZXJlbmNlRGF0YS5sb2NhdGlvbnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge0FpcnBvcnRzfSBhaXJwb3J0c1xuICovXG5jbGFzcyBMb2NhdGlvbnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmFpcnBvcnRzID0gbmV3IEFpcnBvcnRzKGNsaWVudCk7XG4gICAgdGhpcy5wb2ludHNPZkludGVyZXN0ID0gbmV3IFBvaW50c09mSW50ZXJlc3QoY2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhaXJwb3J0cyBhbmQgY2l0aWVzIG1hdGNoaW5nIGEgZ2l2ZW4ga2V5d29yZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmtleXdvcmQga2V5d29yZCB0aGF0IHNob3VsZCByZXByZXNlbnQgdGhlIHN0YXJ0IG9mXG4gICAqICAgYSB3b3JkIGluIGEgY2l0eSBvciBhaXJwb3J0IG5hbWUgb3IgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnN1YlR5cGUgdGhlIHR5cGUgb2YgbG9jYXRpb24gdG8gc2VhcmNoIGZvclxuICAgKiBAcmV0dXJuIHtQcm9taXNlLjxSZXNwb25zZSxSZXNwb25zZUVycm9yPn0gYSBQcm9taXNlXG4gICAqXG4gICAqIEZpbmQgYW55IGxvY2F0aW9uIHN0YXJ0aW5nIHdpdGggJ2xvbidcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy5yZWZlcmVuY2VEYXRhLmxvY2F0aW9uLmdldCh7XG4gICAqICAga2V5d29yZDogJ2xvbicsXG4gICAqICAgc3ViVHlwZTogQW1hZGV1cy5sb2NhdGlvbi5hbnlcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YxL3JlZmVyZW5jZS1kYXRhL2xvY2F0aW9ucycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYXRpb25zO1xuIl19