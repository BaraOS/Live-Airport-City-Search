"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _result = _interopRequireDefault(require("./trip_parser_jobs/result"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A namespaced client for the
 * `/v2/travel/trip-parser-jobs` endpoints
 *
 * Access via the {@link Amadeus} object
 *
 * ```js
 * let amadeus = new Amadeus();
 * amadeus.travel.tripParserJobs;
 * ```
 *
 * @param {Client} client
 * @property {Result} result
 */
var TripParserJobs =
/*#__PURE__*/
function () {
  function TripParserJobs(client, jobId) {
    _classCallCheck(this, TripParserJobs);

    this.client = client;
    this._jobId = jobId;
    this.result = new _result["default"](client, jobId);
  }
  /**
   * To get the parsing status and the link to the result in case of successful parsing.
   *
   * @return {Promise.<Response,ResponseError>} a Promise
   *
   * To get the parsing status and the link to the result for job with ID 'XXX'
   *
   * ```js
   * amadeus.travel.tripParserJobs('XXX').get();
   * ```
   */


  _createClass(TripParserJobs, [{
    key: "get",
    value: function get() {
      if (this._jobId) return this.client.get('/v2/travel/trip-parser-jobs/' + this._jobId);else throw new Error('MISSING_REQUIRED_PARAMETER');
    }
    /**
     * To send the request for the parsing with the booking details and input parameters.
     *
     * @param {Object} params
     * @return {Promise.<Response,ResponseError>} a Promise
     *
     * To get the parsing status and the link to the result for job with ID 'XXX'
     *
     * ```js
     * amadeus.travel.tripParserJobs().post({
     *  'type': 'trip-parser-job',
     *  'content': amadeus.travel.tripParserJobs().convertToJson("fileContentsInUTF8Format");
     * });
     * ```
     */

  }, {
    key: "post",
    value: function post() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.post('/v2/travel/trip-parser-jobs', params);
    }
    /**
     * Helper method to convert file contents in UTF-8 encoded string
     * into Base64 encoded string
     */

  }, {
    key: "convertToJson",
    value: function convertToJson(fileContentsInUTF8Format) {
      return new Buffer(fileContentsInUTF8Format).toString('base64');
    }
  }]);

  return TripParserJobs;
}();

var _default = TripParserJobs;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvdHJhdmVsL3RyaXBfcGFyc2VyX2pvYnMuanMiXSwibmFtZXMiOlsiVHJpcFBhcnNlckpvYnMiLCJjbGllbnQiLCJqb2JJZCIsIl9qb2JJZCIsInJlc3VsdCIsIlJlc3VsdCIsImdldCIsIkVycm9yIiwicGFyYW1zIiwicG9zdCIsImZpbGVDb250ZW50c0luVVRGOEZvcm1hdCIsIkJ1ZmZlciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7SUFjTUEsYzs7O0FBQ0osMEJBQVlDLE1BQVosRUFBb0JDLEtBQXBCLEVBQTJCO0FBQUE7O0FBQ3pCLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtFLE1BQUwsR0FBY0QsS0FBZDtBQUNBLFNBQUtFLE1BQUwsR0FBYyxJQUFJQyxrQkFBSixDQUFXSixNQUFYLEVBQW1CQyxLQUFuQixDQUFkO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7Ozs7OzBCQVdNO0FBQ0osVUFBSSxLQUFLQyxNQUFULEVBQ0UsT0FBTyxLQUFLRixNQUFMLENBQVlLLEdBQVosQ0FBZ0IsaUNBQWlDLEtBQUtILE1BQXRELENBQVAsQ0FERixLQUdFLE1BQU0sSUFBSUksS0FBSixDQUFVLDRCQUFWLENBQU47QUFDSDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBZWtCO0FBQUEsVUFBYkMsTUFBYSx1RUFBSixFQUFJO0FBQ2hCLGFBQU8sS0FBS1AsTUFBTCxDQUFZUSxJQUFaLENBQWlCLDZCQUFqQixFQUFnREQsTUFBaEQsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7a0NBSWNFLHdCLEVBQTBCO0FBQ3RDLGFBQVEsSUFBSUMsTUFBSixDQUFXRCx3QkFBWCxDQUFELENBQXVDRSxRQUF2QyxDQUFnRCxRQUFoRCxDQUFQO0FBQ0Q7Ozs7OztlQUdZWixjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlc3VsdCBmcm9tICcuL3RyaXBfcGFyc2VyX2pvYnMvcmVzdWx0JztcblxuLyoqXG4gKiBBIG5hbWVzcGFjZWQgY2xpZW50IGZvciB0aGVcbiAqIGAvdjIvdHJhdmVsL3RyaXAtcGFyc2VyLWpvYnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy50cmF2ZWwudHJpcFBhcnNlckpvYnM7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50XG4gKiBAcHJvcGVydHkge1Jlc3VsdH0gcmVzdWx0XG4gKi9cbmNsYXNzIFRyaXBQYXJzZXJKb2JzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBqb2JJZCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHRoaXMuX2pvYklkID0gam9iSWQ7XG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgUmVzdWx0KGNsaWVudCwgam9iSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIGdldCB0aGUgcGFyc2luZyBzdGF0dXMgYW5kIHRoZSBsaW5rIHRvIHRoZSByZXN1bHQgaW4gY2FzZSBvZiBzdWNjZXNzZnVsIHBhcnNpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gZ2V0IHRoZSBwYXJzaW5nIHN0YXR1cyBhbmQgdGhlIGxpbmsgdG8gdGhlIHJlc3VsdCBmb3Igam9iIHdpdGggSUQgJ1hYWCdcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy50cmF2ZWwudHJpcFBhcnNlckpvYnMoJ1hYWCcpLmdldCgpO1xuICAgKiBgYGBcbiAgICovXG4gIGdldCgpIHtcbiAgICBpZiAodGhpcy5fam9iSWQpXG4gICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KCcvdjIvdHJhdmVsL3RyaXAtcGFyc2VyLWpvYnMvJyArIHRoaXMuX2pvYklkKTtcbiAgICBlbHNlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01JU1NJTkdfUkVRVUlSRURfUEFSQU1FVEVSJyk7XG4gIH1cblxuICAvKipcbiAgICogVG8gc2VuZCB0aGUgcmVxdWVzdCBmb3IgdGhlIHBhcnNpbmcgd2l0aCB0aGUgYm9va2luZyBkZXRhaWxzIGFuZCBpbnB1dCBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gZ2V0IHRoZSBwYXJzaW5nIHN0YXR1cyBhbmQgdGhlIGxpbmsgdG8gdGhlIHJlc3VsdCBmb3Igam9iIHdpdGggSUQgJ1hYWCdcbiAgICpcbiAgICogYGBganNcbiAgICogYW1hZGV1cy50cmF2ZWwudHJpcFBhcnNlckpvYnMoKS5wb3N0KHtcbiAgICogICd0eXBlJzogJ3RyaXAtcGFyc2VyLWpvYicsXG4gICAqICAnY29udGVudCc6IGFtYWRldXMudHJhdmVsLnRyaXBQYXJzZXJKb2JzKCkuY29udmVydFRvSnNvbihcImZpbGVDb250ZW50c0luVVRGOEZvcm1hdFwiKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcG9zdChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjIvdHJhdmVsL3RyaXAtcGFyc2VyLWpvYnMnLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gY29udmVydCBmaWxlIGNvbnRlbnRzIGluIFVURi04IGVuY29kZWQgc3RyaW5nXG4gICAqIGludG8gQmFzZTY0IGVuY29kZWQgc3RyaW5nXG4gICAqL1xuICBjb252ZXJ0VG9Kc29uKGZpbGVDb250ZW50c0luVVRGOEZvcm1hdCkge1xuICAgIHJldHVybiAobmV3IEJ1ZmZlcihmaWxlQ29udGVudHNJblVURjhGb3JtYXQpKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJpcFBhcnNlckpvYnM7Il19