"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * A namespaced client for the
 * `/v2/shopping/flight-offers` endpoints
 *
 * Access via the {@link Amadeus} object
 *
 * ```js
 * let amadeus = new Amadeus();
 * amadeus.shopping.flightOffersSeach;
 * ```
 *
 * @param {Client} client
 */
var FlightOffersSearch =
/*#__PURE__*/
function () {
  function FlightOffersSearch(client) {
    _classCallCheck(this, FlightOffersSearch);

    this.client = client;
  }
  /**
   * Get cheapest flight recommendations and prices on a given journey.
   *
   * @param {Object} params
   * @param {string} params.originLocationCode city/airport IATA code from which the traveler will depart, e.g. BOS for Boston
   * @param {string} params.destinationLocationCode city/airport IATA code to which the traveler is going, e.g. PAR for Paris
   * @param {string} params.departureDate the date on which the traveler will depart
   * from the origin to go to the destination. Dates are specified in the ISO 8601 YYYY-MM-DD format, e.g. 2017-12-25
   * @param {string} params.adults the number of adult travelers (age 12 or older on date of departure)
   * @return {Promise.<Response,ResponseError>} a Promise
   *
   * Get cheapest flight recommendations and prices for SYD-BKK on 2020-08-01 for 2 adults
   *
   * ```js
   * amadeus.shopping.flightOffers.get({
   *    originLocationCode: 'SYD',
   *    destinationLocationCode: 'BKK',
   *    departureDate: '2020-08-01',
   *    adults: '2'
   * });
   * ```
   */


  _createClass(FlightOffersSearch, [{
    key: "get",
    value: function get() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get('/v2/shopping/flight-offers', params);
    }
    /**
     * To do a customized search with every option available.
     *
     * @param {Object} params
     * @param {Double} params.getFlightOffersBody list of criteria to retrieve a list of flight offers
     * @return {Promise.<Response,ResponseError>} a Promise
     *
     * To do a customized search with given options.
     *
     * ```js
     * amadeus.shopping.flightOffersSearch.post (JSON.stringify({
          "currencyCode": "USD",
          "originDestinations": [
            {
              "id": "1",
              "originLocationCode": "RIO",
              "destinationLocationCode": "MAD",
              "departureDateTimeRange": {
                "date": "2020-03-01",
                "time": "10:00:00"
              }
            },
            {
              "id": "2",
              "originLocationCode": "MAD",
              "destinationLocationCode": "RIO",
              "departureDateTimeRange": {
                "date": "2020-03-05",
                "time": "17:00:00"
              }
            }
          ],
          "travelers": [
            {
              "id": "1",
              "travelerType": "ADULT",
              "fareOptions": [
                "STANDARD"
              ]
            },
            {
              "id": "2",
              "travelerType": "CHILD",
              "fareOptions": [
                "STANDARD"
              ]
            }
          ],
          "sources": [
            "GDS"
          ],
          "searchCriteria": {
            "maxFlightOffers": 50,
            "flightFilters": {
              "cabinRestrictions": [
                {
                  "cabin": "BUSINESS",
                  "coverage": "MOST_SEGMENTS",
                  "originDestinationIds": [
                    "1"
                  ]
                }
              ],
              "carrierRestrictions": {
                "excludedCarrierCodes": [
                  "AA",
                  "TP",
                  "AZ"
                ]
              }
            }
          }
        }))
      * ```
      */

  }, {
    key: "post",
    value: function post() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.post('/v2/shopping/flight-offers', params);
    }
  }]);

  return FlightOffersSearch;
}();

var _default = FlightOffersSearch;
exports["default"] = _default;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbWFkZXVzL25hbWVzcGFjZXMvc2hvcHBpbmcvZmxpZ2h0X29mZmVyc19zZWFyY2guanMiXSwibmFtZXMiOlsiRmxpZ2h0T2ZmZXJzU2VhcmNoIiwiY2xpZW50IiwicGFyYW1zIiwiZ2V0IiwicG9zdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7O0lBYU1BLGtCOzs7QUFDSiw4QkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNsQixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFzQmlCO0FBQUEsVUFBYkMsTUFBYSx1RUFBSixFQUFJO0FBQ2YsYUFBTyxLQUFLRCxNQUFMLENBQVlFLEdBQVosQ0FBZ0IsNEJBQWhCLEVBQThDRCxNQUE5QyxDQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQTJFa0I7QUFBQSxVQUFiQSxNQUFhLHVFQUFKLEVBQUk7QUFDaEIsYUFBTyxLQUFLRCxNQUFMLENBQVlHLElBQVosQ0FBaUIsNEJBQWpCLEVBQStDRixNQUEvQyxDQUFQO0FBQ0Q7Ozs7OztlQUdZRixrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBuYW1lc3BhY2VkIGNsaWVudCBmb3IgdGhlXG4gKiBgL3YyL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnNgIGVuZHBvaW50c1xuICpcbiAqIEFjY2VzcyB2aWEgdGhlIHtAbGluayBBbWFkZXVzfSBvYmplY3RcbiAqXG4gKiBgYGBqc1xuICogbGV0IGFtYWRldXMgPSBuZXcgQW1hZGV1cygpO1xuICogYW1hZGV1cy5zaG9wcGluZy5mbGlnaHRPZmZlcnNTZWFjaDtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7Q2xpZW50fSBjbGllbnRcbiAqL1xuY2xhc3MgRmxpZ2h0T2ZmZXJzU2VhcmNoIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNoZWFwZXN0IGZsaWdodCByZWNvbW1lbmRhdGlvbnMgYW5kIHByaWNlcyBvbiBhIGdpdmVuIGpvdXJuZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5vcmlnaW5Mb2NhdGlvbkNvZGUgY2l0eS9haXJwb3J0IElBVEEgY29kZSBmcm9tIHdoaWNoIHRoZSB0cmF2ZWxlciB3aWxsIGRlcGFydCwgZS5nLiBCT1MgZm9yIEJvc3RvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLmRlc3RpbmF0aW9uTG9jYXRpb25Db2RlIGNpdHkvYWlycG9ydCBJQVRBIGNvZGUgdG8gd2hpY2ggdGhlIHRyYXZlbGVyIGlzIGdvaW5nLCBlLmcuIFBBUiBmb3IgUGFyaXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5kZXBhcnR1cmVEYXRlIHRoZSBkYXRlIG9uIHdoaWNoIHRoZSB0cmF2ZWxlciB3aWxsIGRlcGFydFxuICAgKiBmcm9tIHRoZSBvcmlnaW4gdG8gZ28gdG8gdGhlIGRlc3RpbmF0aW9uLiBEYXRlcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBJU08gODYwMSBZWVlZLU1NLUREIGZvcm1hdCwgZS5nLiAyMDE3LTEyLTI1XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuYWR1bHRzIHRoZSBudW1iZXIgb2YgYWR1bHQgdHJhdmVsZXJzIChhZ2UgMTIgb3Igb2xkZXIgb24gZGF0ZSBvZiBkZXBhcnR1cmUpXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogR2V0IGNoZWFwZXN0IGZsaWdodCByZWNvbW1lbmRhdGlvbnMgYW5kIHByaWNlcyBmb3IgU1lELUJLSyBvbiAyMDIwLTA4LTAxIGZvciAyIGFkdWx0c1xuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhbWFkZXVzLnNob3BwaW5nLmZsaWdodE9mZmVycy5nZXQoe1xuICAgKiAgICBvcmlnaW5Mb2NhdGlvbkNvZGU6ICdTWUQnLFxuICAgKiAgICBkZXN0aW5hdGlvbkxvY2F0aW9uQ29kZTogJ0JLSycsXG4gICAqICAgIGRlcGFydHVyZURhdGU6ICcyMDIwLTA4LTAxJyxcbiAgICogICAgYWR1bHRzOiAnMidcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0KHBhcmFtcyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmdldCgnL3YyL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnMnLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIGRvIGEgY3VzdG9taXplZCBzZWFyY2ggd2l0aCBldmVyeSBvcHRpb24gYXZhaWxhYmxlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gICAqIEBwYXJhbSB7RG91YmxlfSBwYXJhbXMuZ2V0RmxpZ2h0T2ZmZXJzQm9keSBsaXN0IG9mIGNyaXRlcmlhIHRvIHJldHJpZXZlIGEgbGlzdCBvZiBmbGlnaHQgb2ZmZXJzXG4gICAqIEByZXR1cm4ge1Byb21pc2UuPFJlc3BvbnNlLFJlc3BvbnNlRXJyb3I+fSBhIFByb21pc2VcbiAgICpcbiAgICogVG8gZG8gYSBjdXN0b21pemVkIHNlYXJjaCB3aXRoIGdpdmVuIG9wdGlvbnMuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGFtYWRldXMuc2hvcHBpbmcuZmxpZ2h0T2ZmZXJzU2VhcmNoLnBvc3QgKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgXCJjdXJyZW5jeUNvZGVcIjogXCJVU0RcIixcbiAgICAgICAgXCJvcmlnaW5EZXN0aW5hdGlvbnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaWRcIjogXCIxXCIsXG4gICAgICAgICAgICBcIm9yaWdpbkxvY2F0aW9uQ29kZVwiOiBcIlJJT1wiLFxuICAgICAgICAgICAgXCJkZXN0aW5hdGlvbkxvY2F0aW9uQ29kZVwiOiBcIk1BRFwiLFxuICAgICAgICAgICAgXCJkZXBhcnR1cmVEYXRlVGltZVJhbmdlXCI6IHtcbiAgICAgICAgICAgICAgXCJkYXRlXCI6IFwiMjAyMC0wMy0wMVwiLFxuICAgICAgICAgICAgICBcInRpbWVcIjogXCIxMDowMDowMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImlkXCI6IFwiMlwiLFxuICAgICAgICAgICAgXCJvcmlnaW5Mb2NhdGlvbkNvZGVcIjogXCJNQURcIixcbiAgICAgICAgICAgIFwiZGVzdGluYXRpb25Mb2NhdGlvbkNvZGVcIjogXCJSSU9cIixcbiAgICAgICAgICAgIFwiZGVwYXJ0dXJlRGF0ZVRpbWVSYW5nZVwiOiB7XG4gICAgICAgICAgICAgIFwiZGF0ZVwiOiBcIjIwMjAtMDMtMDVcIixcbiAgICAgICAgICAgICAgXCJ0aW1lXCI6IFwiMTc6MDA6MDBcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJ0cmF2ZWxlcnNcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiaWRcIjogXCIxXCIsXG4gICAgICAgICAgICBcInRyYXZlbGVyVHlwZVwiOiBcIkFEVUxUXCIsXG4gICAgICAgICAgICBcImZhcmVPcHRpb25zXCI6IFtcbiAgICAgICAgICAgICAgXCJTVEFOREFSRFwiXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImlkXCI6IFwiMlwiLFxuICAgICAgICAgICAgXCJ0cmF2ZWxlclR5cGVcIjogXCJDSElMRFwiLFxuICAgICAgICAgICAgXCJmYXJlT3B0aW9uc1wiOiBbXG4gICAgICAgICAgICAgIFwiU1RBTkRBUkRcIlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzb3VyY2VzXCI6IFtcbiAgICAgICAgICBcIkdEU1wiXG4gICAgICAgIF0sXG4gICAgICAgIFwic2VhcmNoQ3JpdGVyaWFcIjoge1xuICAgICAgICAgIFwibWF4RmxpZ2h0T2ZmZXJzXCI6IDUwLFxuICAgICAgICAgIFwiZmxpZ2h0RmlsdGVyc1wiOiB7XG4gICAgICAgICAgICBcImNhYmluUmVzdHJpY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY2FiaW5cIjogXCJCVVNJTkVTU1wiLFxuICAgICAgICAgICAgICAgIFwiY292ZXJhZ2VcIjogXCJNT1NUX1NFR01FTlRTXCIsXG4gICAgICAgICAgICAgICAgXCJvcmlnaW5EZXN0aW5hdGlvbklkc1wiOiBbXG4gICAgICAgICAgICAgICAgICBcIjFcIlxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2FycmllclJlc3RyaWN0aW9uc1wiOiB7XG4gICAgICAgICAgICAgIFwiZXhjbHVkZWRDYXJyaWVyQ29kZXNcIjogW1xuICAgICAgICAgICAgICAgIFwiQUFcIixcbiAgICAgICAgICAgICAgICBcIlRQXCIsXG4gICAgICAgICAgICAgICAgXCJBWlwiXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKVxuICAgICogYGBgXG4gICAgKi9cbiAgcG9zdChwYXJhbXMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KCcvdjIvc2hvcHBpbmcvZmxpZ2h0LW9mZmVycycsIHBhcmFtcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmxpZ2h0T2ZmZXJzU2VhcmNoO1xuIl19